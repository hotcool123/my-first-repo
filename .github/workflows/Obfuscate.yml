name: Build Obfuscate BPB Panel

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Prepare origin.js (auto-discover via jq)
        run: |
          set -euo pipefail

          REPO="bia-pain-bache/BPB-Worker-Panel"
          DEST="origin.js"
          TMPDIR="bpb_tmp"
          mkdir -p "$TMPDIR"

          # 1) Try common branches raw path
          branches=("main" "master" "develop" "dev" "release" "production")
          found=0
          for b in "${branches[@]}"; do
            url="https://raw.githubusercontent.com/${REPO}/${b}/build/unobfuscated-worker.js"
            echo "Trying raw URL: $url"
            if wget -q -O "$DEST" --tries=3 --timeout=30 "$url"; then
              echo "Downloaded origin.js from raw: $url"
              found=1
              break
            fi
          done

          # 2) If not found, query GitHub releases for assets (using jq)
          if [ $found -eq 0 ]; then
            echo "Raw path not found on tried branches. Querying releases for assets with curl+jq..."
            releases_json=$(curl -s "https://api.github.com/repos/${REPO}/releases")
            if [ -n "$releases_json" ]; then
              asset_url=$(echo "$releases_json" | jq -r '.[] | .assets[]? | select((.name|ascii_downcase) | test("unobfus|worker")) | .browser_download_url' 2>/dev/null | head -n1 || true)
              if [ -n "$asset_url" ]; then
                echo "Found release asset URL: $asset_url"
                if wget -q -O "$DEST" --tries=3 --timeout=30 "$asset_url"; then
                  echo "Downloaded origin.js from release asset"
                  found=1
                else
                  echo "Failed to download found asset URL: $asset_url"
                fi
              else
                echo "No suitable release asset found by keywords."
              fi
            else
              echo "Failed to fetch releases JSON (maybe rate-limited)."
            fi
          fi

          # 3) Try conventional releases/latest download URLs
          if [ $found -eq 0 ]; then
            echo "Trying conventional releases/latest download URLs..."
            candidates=(
              "https://github.com/${REPO}/releases/latest/download/unobfuscated-worker.js"
              "https://github.com/${REPO}/releases/latest/download/unobfuscated-worker.zip"
              "https://github.com/${REPO}/releases/latest/download/worker.js"
              "https://github.com/${REPO}/releases/latest/download/worker.zip"
            )
            for c in "${candidates[@]}"; do
              echo "Trying $c"
              if wget -q -O "$TMPDIR/tmp_asset" --tries=3 --timeout=30 "$c"; then
                filetype=$(file -b --mime-type "$TMPDIR/tmp_asset" || echo "")
                if echo "$filetype" | grep -q "application/zip"; then
                  echo "Downloaded a zip, attempting to extract..."
                  if unzip -p "$TMPDIR/tmp_asset" unobfuscated-worker.js > "$DEST" 2>/dev/null; then
                    echo "Extracted unobfuscated-worker.js from zip"
                    found=1
                    break
                  else
                    unzip "$TMPDIR/tmp_asset" -d "$TMPDIR/extracted" || true
                    match=$(find "$TMPDIR/extracted" -type f -iname '*unobfusc*' -o -iname '*worker*' -print -quit || true)
                    if [ -n "$match" ]; then
                      cp "$match" "$DEST"
                      echo "Extracted candidate from zip: $match"
                      found=1
                      break
                    fi
                  fi
                else
                  mv "$TMPDIR/tmp_asset" "$DEST"
                  echo "Downloaded origin.js from $c"
                  found=1
                  break
                fi
              fi
            done
          fi

          # 4) Last fallback: clone repository and search
          if [ $found -eq 0 ]; then
            echo "Falling back to git clone and repository search..."
            rm -rf bpb-src || true
            if git clone --depth 1 "https://github.com/${REPO}.git" bpb-src; then
              match=$(find bpb-src -type f -iname '*unobfusc*' -o -iname '*worker*' -print -quit || true)
              if [ -n "$match" ]; then
                echo "Found candidate file in repo: $match"
                cp "$match" "$DEST"
                found=1
              else
                echo "No candidate file found in cloned repo."
              fi
            else
              echo "git clone failed"
            fi
          fi

          # final check
          if [ $found -eq 1 ] && [ -s "$DEST" ]; then
            echo "origin.js ready, size: $(wc -c < "$DEST") bytes"
          else
            echo "ERROR: origin.js not found by any method." >&2
            exit 1
          fi

      - name: Check for origin.js changes
        id: check_changes
        run: |
          if git diff --quiet HEAD -- origin.js; then
            echo "::set-output name=changed::false"
            echo "origin.js unchanged, skipping obfuscation"
          else
            echo "::set-output name=changed::true"
            echo "origin.js changed, running obfuscation"
          fi

      - name: Stop if no changes
        if: steps.check_changes.outputs.changed == 'false'
        run: exit 0

      - name: Install javascript-obfuscator
        run: npm install -g javascript-obfuscator

      - name: Obfuscate worker
        run: |
          mkdir -p build
          javascript-obfuscator origin.js \
            --output build/_worker.js \
            --compact true \
            --control-flow-flattening true \
            --control-flow-flattening-threshold 0.75 \
            --dead-code-injection true \
            --dead-code-injection-threshold 0.4 \
            --identifier-names-generator hexadecimal \
            --rename-globals true \
            --string-array true \
            --string-array-encoding rc4 \
            --string-array-threshold 0.75 \
            --self-defending true \
            --unicode-escape-sequence true
          echo "Obfuscation complete, output: build/_worker.js"

      - name: Commit and push obfuscated file
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add build/_worker.js || true
          git commit -m "Update obfuscated worker.js [ci skip]" || echo "No changes to commit"
          git push origin main || echo "Nothing to push"

      - name: Upload obfuscated worker artifact
        uses: actions/upload-artifact@v4
        with:
          name: obfuscated-worker
          path: build/_worker.js
