name: Auto fetch & obfuscate BPB worker (one-shot)

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Prepare environment
        run: |
          set -euo pipefail
          mkdir -p .github/workflows
          echo "ENV ready"

      - name: Try download origin.js from releases (best-effort)
        id: download
        run: |
          set -euo pipefail
          REPO="bia-pain-bache/BPB-Worker-Panel"
          DEST=".github/workflows/origin.js"
          TMPDIR="$(mktemp -d)"
          echo "Looking for suitable release asset in ${REPO}..."

          # 1) Try to find direct asset with keywords via GitHub Releases API (jq)
          releases_json="$(curl -sSf "https://api.github.com/repos/${REPO}/releases" || true)"
          asset_url=""
          if [ -n "$releases_json" ]; then
            asset_url=$(echo "$releases_json" \
              | jq -r '.[] | .assets[]? | select((.name|ascii_downcase) | test("unobfus|worker|unobfuscated")) | .browser_download_url' 2>/dev/null | head -n1 || true)
          fi

          if [ -n "$asset_url" ]; then
            echo "Found release asset: $asset_url"
            if wget -q -O "$DEST" --tries=3 --timeout=30 "$asset_url"; then
              echo "downloaded-from-asset"
              echo "::set-output name=result::downloaded-from-asset"
              exit 0
            else
              echo "asset download failed, will try other methods"
            fi
          else
            echo "no matching release asset found"
          fi

          # 2) Try conventional releases/latest download names
          echo "Trying conventional release download URLs..."
          candidates=(
            "https://github.com/${REPO}/releases/latest/download/unobfuscated-worker.js"
            "https://github.com/${REPO}/releases/latest/download/unobfuscated-worker.zip"
            "https://github.com/${REPO}/releases/latest/download/worker.js"
            "https://github.com/${REPO}/releases/latest/download/worker.zip"
          )
          for c in "${candidates[@]}"; do
            echo "Trying $c"
            if wget -q -O "$TMPDIR/tmp_asset" --tries=3 --timeout=30 "$c"; then
              # if zip, try extract; else treat as js
              mimetype=$(file -b --mime-type "$TMPDIR/tmp_asset" || echo "")
              if echo "$mimetype" | grep -q "zip"; then
                echo "Downloaded zip from $c â€” trying to extract candidate"
                if unzip -p "$TMPDIR/tmp_asset" unobfuscated-worker.js > "$DEST" 2>/dev/null; then
                  echo "extracted-from-zip"
                  echo "::set-output name=result::extracted-from-zip"
                  exit 0
                else
                  mkdir -p "$TMPDIR/extracted"
                  unzip -q "$TMPDIR/tmp_asset" -d "$TMPDIR/extracted" || true
                  match=$(find "$TMPDIR/extracted" -type f -iname '*unobfusc*' -o -iname '*worker*' -print -quit || true)
                  if [ -n "$match" ]; then
                    cp "$match" "$DEST"
                    echo "extracted-candidate-from-zip: $match"
                    echo "::set-output name=result::extracted-candidate-from-zip"
                    exit 0
                  fi
                fi
              else
                mv "$TMPDIR/tmp_asset" "$DEST"
                echo "downloaded-js-from-conventional-url"
                echo "::set-output name=result::downloaded-js-from-conventional-url"
                exit 0
              fi
            fi
          done

          # 3) Try raw path on several common branches
          echo "Trying raw paths on common branches..."
          branches=(main master develop dev release production)
          for b in "${branches[@]}"; do
            rawurl="https://raw.githubusercontent.com/${REPO}/${b}/build/unobfuscated-worker.js"
            echo "Trying $rawurl"
            if wget -q -O "$DEST" --tries=3 --timeout=30 "$rawurl"; then
              echo "downloaded-from-raw:${b}"
              echo "::set-output name=result::downloaded-from-raw-${b}"
              exit 0
            fi
          done

          # 4) Last fallback: clone and search
          echo "Fallback: git clone and search for candidate files..."
          rm -rf "$TMPDIR/bpb-src" || true
          if git clone --depth 1 "https://github.com/${REPO}.git" "$TMPDIR/bpb-src"; then
            match=$(find "$TMPDIR/bpb-src" -type f -iname '*unobfusc*' -o -iname '*worker*' -print -quit || true)
            if [ -n "$match" ]; then
              cp "$match" "$DEST"
              echo "copied-from-clone:$match"
              echo "::set-output name=result::copied-from-clone"
              exit 0
            else
              echo "No candidate file found in clone."
            fi
          else
            echo "git clone failed"
          fi

          # nothing succeeded
          echo "ERROR: Unable to obtain unobfuscated worker file from upstream" >&2
          echo "::set-output name=result::not-found"
          exit 1

      - name: Verify origin.js
        run: |
          if [ ! -f .github/workflows/origin.js ] || [ ! -s .github/workflows/origin.js ]; then
            echo "origin.js missing or empty in .github/workflows" >&2
            exit 1
          fi
          echo "origin.js ready: size $(wc -c < .github/workflows/origin.js) bytes"

      - name: Install javascript-obfuscator
        run: npm install -g javascript-obfuscator

      - name: Obfuscate origin.js -> _worker.js (in workflow folder)
        run: |
          javascript-obfuscator .github/workflows/origin.js \
            --output .github/workflows/_worker.js \
            --compact true \
            --control-flow-flattening true \
            --control-flow-flattening-threshold 0.75 \
            --dead-code-injection true \
            --dead-code-injection-threshold 0.4 \
            --identifier-names-generator hexadecimal \
            --rename-globals true \
            --string-array true \
            --string-array-encoding rc4 \
            --string-array-threshold 0.75 \
            --self-defending true \
            --unicode-escape-sequence true
          echo "Generated .github/workflows/_worker.js (size: $(wc -c < .github/workflows/_worker.js) bytes)"

      - name: Upload both files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: workflow-generated-js
          path: |
            .github/workflows/origin.js
            .github/workflows/_worker.js
          retention-days: 7

      - name: Commit generated files back to repo (if changed)
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .github/workflows/origin.js .github/workflows/_worker.js || true
          # commit only if there are changes
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Add/update generated origin.js and _worker.js [ci skip]"
            git push origin HEAD:main
          fi
